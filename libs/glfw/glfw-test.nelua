require 'math'
require 'glfw'

local do_redraw: boolean = false
local width: cint
local height: cint

local function draw()
  local r: number = math.random()
  local g: number = math.random()
  local b: number = math.random()
  local l: number = math.sqrt(r * r + g * g + b * b)
  glClearColor(r/l,g/l,b/l,1.0)
  glClear(0x00004000)
end

local function framebufferSizeFun(window: *GLFWwindow, w: cint , h: cint)
  width = w
  height = h > 0 and h or 1
  do_redraw = true
end

local function windowRefreshFun(window: *GLFWwindow)
  draw()
  glfwSwapBuffers(window)
  do_redraw = false
end

local function go()
  glfwInit()
  local window = glfwCreateWindow(400, 400, "Test Window", nilptr, nilptr)
  assert(window, "Could not create window")

  glfwSetFramebufferSizeCallback(window, framebufferSizeFun)
  glfwSetWindowRefreshCallback(window, windowRefreshFun)

  glfwGetFramebufferSize(window, &width, &height)
  framebufferSizeFun(window, width, height)

  glfwMakeContextCurrent(window)
  glfwSwapInterval(1)

  while glfwWindowShouldClose(window) == 0 do
    if do_redraw then
      windowRefreshFun(window)
    end
    glfwWaitEvents()
  end

  glfwTerminate()
end

go()
